import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

// This is a simplified middleware for handling authentication in the Miftah application
export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // Always allow access to these public paths
  const publicPaths = ['/login', '/logout', '/'];
  if (publicPaths.includes(pathname) || 
      pathname.startsWith('/_next/') || 
      pathname.startsWith('/api/') || 
      pathname.includes('.')) {
    // Add debugging header for public paths
    const response = NextResponse.next();
    response.headers.set('x-miftah-auth', 'public-path');
    return response;
  }

  // Skip authentication during static site generation to avoid build errors
  if (process.env.NODE_ENV === 'production' && process.env.NEXT_PHASE === 'phase-production-build') {
    return NextResponse.next();
  }

  // Get authentication cookies
  const userIdCookie = request.cookies.get('userId');
  const userRoleCookie = request.cookies.get('userRole');
  
  // Enhanced logging for debugging authentication issues
  console.log(`[middleware] Auth check for ${pathname}`, {
    origin: request.headers.get('origin') || 'unknown',
    hasUserIdCookie: !!userIdCookie,
    hasUserRoleCookie: !!userRoleCookie,
    cookieHeader: request.headers.get('cookie')?.substring(0, 100) || 'none',
  });

  // Define protected routes that require authentication
  const protectedRoutes = [
    '/dashboard',
    '/progress',
    '/study-plan',
    '/teacher',
    '/admin',
    '/courses'
  ];
  
  const needsAuth = protectedRoutes.some(route => pathname.startsWith(route));

  // If this is not a protected route, allow access
  if (!needsAuth) {
    return NextResponse.next();
  }
  
  // Allow access if user has auth cookies
  if (userIdCookie || userRoleCookie) {
    // Create a new response with enhanced cookies for cross-domain compatibility
    const authResponse = NextResponse.next();

    // Add CORS headers for production to help with cookie issues
    if (process.env.NODE_ENV === 'production') {
      const appUrl = process.env.NEXT_PUBLIC_APP_URL || '';
      let domain = undefined;
      
      // Extract domain from APP_URL for cookie settings
      try {
        if (appUrl) {
          domain = new URL(appUrl).hostname;
          // Don't set domain if it's an IP address
          if (/^\d+\.\d+\.\d+\.\d+$/.test(domain)) {
            domain = undefined;
          }
        }
      } catch (e) {
        console.error('[middleware] Error parsing APP_URL:', e);
      }
      
      // Add CORS headers
      authResponse.headers.set('Access-Control-Allow-Credentials', 'true');
      authResponse.headers.set('Access-Control-Allow-Origin', request.headers.get('origin') || '*');
    }
    
    authResponse.headers.set('x-miftah-auth', 'authorized');
    return authResponse;
  }
  
  // No auth cookies found but this is a protected route, redirect to login
  console.log(`[middleware] No auth cookies for protected route ${pathname}, redirecting to login`);
  const loginUrl = new URL('/login', request.url);
  
  // Add the original URL as a 'from' parameter to redirect back after login
  loginUrl.searchParams.set('from', pathname);
  
  const redirectResponse = NextResponse.redirect(loginUrl);
  redirectResponse.headers.set('x-miftah-auth-redirect', 'true');
  return redirectResponse;
}

// Configure which paths the middleware applies to
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
