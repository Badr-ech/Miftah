name: Miftah CI/CD Pipeline

# Implemented via GitHub Actions to automate:
# - Build, test, and deploy the Next.js-based educational platform
# - Install dependencies, run linting and type checks
# - Deploy to Vercel for production environment
# - Clean up old deployments automatically
# - Trigger on each GitHub push to main/master branches

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # This job handles building and testing the Next.js application with TypeScript
  build-and-test:
    runs-on: ubuntu-latest

    # Set up MongoDB service for tests
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to v4

      - name: Setup Node.js
        uses: actions/setup-node@v4  # Updated to v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        
      # Generate Prisma client
      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: mongodb://localhost:27017/miftah_test
        
      # Run Prisma validation
      - name: Validate Prisma Schema
        run: npx prisma validate
        env:
          DATABASE_URL: mongodb://localhost:27017/miftah_test
        
      # Push schema to test database (needed before tests)
      - name: Push schema to MongoDB
        run: npx prisma db push --force-reset
        env:
          DATABASE_URL: mongodb://localhost:27017/miftah_test
        
      # Run Prisma tests with the test database
      - name: Run Prisma tests
        run: npx prisma validate
        env:
          DATABASE_URL: mongodb://localhost:27017/miftah_test

      # Restore Next.js cache if available
      - name: Restore Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Lint
        run: npm run lint -- --max-warnings=0
        env:
          ESLINT_ARGS: "--cache --format=compact"

      - name: Type check
        run: npm run typecheck

      # Add environment variables with default values for CI
      - name: Build
        run: npm run build
        env:
          # Set safer defaults for CI environment
          NODE_ENV: production
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY != '' && secrets.GOOGLE_API_KEY || 'dummy-key-for-ci' }}
          GOOGLEAI_API_KEY: ${{ secrets.GOOGLEAI_API_KEY != '' && secrets.GOOGLEAI_API_KEY || 'dummy-key-for-ci' }}
          # Add any other required environment variables for the build
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL != '' && secrets.NEXT_PUBLIC_API_URL || 'https://api-staging.example.com' }}
          GENKIT_API_KEY: ${{ secrets.GENKIT_API_KEY != '' && secrets.GENKIT_API_KEY || 'dummy-key-for-ci' }}

  # Deploy to Vercel production environment after successful build and test
  deploy:
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    # Define production environment with deployment URL for easy access
    environment:
      name: production
      url: ${{ steps.deploy-vercel.outputs.preview-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to v4

      - name: Setup Node.js
        uses: actions/setup-node@v4  # Updated to v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Test MongoDB Connection
        run: |
          echo "Testing MongoDB connection..."
          npx ts-node -e '
            const { PrismaClient } = require("./src/generated/prisma");
            const prisma = new PrismaClient();
            
            async function testConnection() {
              try {
                console.log("Attempting to connect to MongoDB...");
                await prisma.$connect();
                console.log("✅ Successfully connected to MongoDB!");
                
                // Try a simple query
                const count = await prisma.user.count();
                console.log(`Found ${count} users in the database`);
                
                await prisma.$disconnect();
              } catch (error) {
                console.error("❌ MongoDB connection failed:", error);
                process.exit(1);
              }
            }
            
            testConnection();
          '
        env:
          DATABASE_URL: mongodb://localhost:27017/miftah_test
        
      # Restore Next.js cache if available
      - name: Restore Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
          
      - name: Build
        run: npm run build
        env:
          # Use actual secrets for production deployment
          NODE_ENV: production
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GOOGLEAI_API_KEY: ${{ secrets.GOOGLEAI_API_KEY }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          GENKIT_API_KEY: ${{ secrets.GENKIT_API_KEY }}
          
      # Deploy the Next.js educational platform to Vercel's production environment
      - name: Deploy to Vercel
        id: deploy-vercel
        uses: amondnet/vercel-action@v25  # Using the latest stable version
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'  # Ensures deployment to production environment
          
      # Automatically clean up older deployments to maintain a clean environment and reduce costs
      - name: Cleanup old deployments
        if: success()
        run: |
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq
          
          # Get list of deployments - debug mode with full response
          echo "Fetching deployment list from Vercel..."
          DEPLOYMENTS_RESPONSE=$(curl -v -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            "https://api.vercel.com/v6/deployments?projectId=${{ secrets.VERCEL_PROJECT_ID }}&teamId=${{ secrets.VERCEL_ORG_ID }}&limit=100")
          
          # Check if there was an error getting deployments
          if echo "$DEPLOYMENTS_RESPONSE" | jq -e '.error' > /dev/null; then
            ERROR_MESSAGE=$(echo "$DEPLOYMENTS_RESPONSE" | jq -r '.error.message')
            echo "Error fetching deployments: $ERROR_MESSAGE"
            echo "API Response: $DEPLOYMENTS_RESPONSE"
            exit 1
          fi
          
          # Ensure we have deployments in the response
          DEPLOYMENTS_COUNT=$(echo "$DEPLOYMENTS_RESPONSE" | jq -r '.deployments | length')
          if [ "$DEPLOYMENTS_COUNT" -eq 0 ]; then
            echo "No deployments found to clean up"
            echo "API Response: $DEPLOYMENTS_RESPONSE"
            exit 0
          fi
          
          echo "Found $DEPLOYMENTS_COUNT deployments in total"
          
          # Filter for production deployments only
          PROD_DEPLOYMENTS=$(echo "$DEPLOYMENTS_RESPONSE" | jq -c '[.deployments[] | select(.target == "production")]')
          PROD_COUNT=$(echo "$PROD_DEPLOYMENTS" | jq -r 'length')
          echo "Found $PROD_COUNT production deployments"
          
          # Ensure we have at least one deployment
          if [ "$PROD_COUNT" -lt 1 ]; then
            echo "No production deployments found to clean up"
            exit 0
          fi
          
          # Extract latest production deployment ID
          LATEST_DEPLOYMENT=$(echo "$PROD_DEPLOYMENTS" | jq -r '.[0]')
          LATEST_DEPLOYMENT_ID=$(echo "$LATEST_DEPLOYMENT" | jq -r '.uid')
          LATEST_DEPLOYMENT_URL=$(echo "$LATEST_DEPLOYMENT" | jq -r '.url')
          echo "Latest deployment: $LATEST_DEPLOYMENT_ID ($LATEST_DEPLOYMENT_URL) - Keeping this one"
          
          # Skip if there's only one deployment
          if [ "$PROD_COUNT" -lt 2 ]; then
            echo "Only one production deployment found. Nothing to clean up."
            exit 0
          fi
          
          # Try two different API endpoints for deletion (v13 and v6)
          echo "Starting cleanup of older deployments..."
          echo "$PROD_DEPLOYMENTS" | jq -c '.[1:][]' | while read -r deployment; do
            DEPLOYMENT_ID=$(echo "$deployment" | jq -r '.uid')
            DEPLOYMENT_URL=$(echo "$deployment" | jq -r '.url')
            DEPLOYMENT_STATE=$(echo "$deployment" | jq -r '.state')
            echo "Found old deployment: $DEPLOYMENT_ID ($DEPLOYMENT_URL) - State: $DEPLOYMENT_STATE"
            
            # Try to delete using v13 endpoint
            echo "Attempting to delete deployment with v13 endpoint..."
            DELETE_RESPONSE_V13=$(curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
              "https://api.vercel.com/v13/deployments/$DEPLOYMENT_ID?teamId=${{ secrets.VERCEL_ORG_ID }}")
            
            V13_ERROR=$(echo "$DELETE_RESPONSE_V13" | jq -r '.error.message // empty')
            
            if [ -z "$V13_ERROR" ]; then
              echo "Successfully deleted deployment $DEPLOYMENT_ID with v13 endpoint"
              continue
            else
              echo "Error with v13 endpoint: $V13_ERROR"
              
              # Try v6 endpoint as fallback
              echo "Attempting to delete deployment with v6 endpoint..."
              DELETE_RESPONSE_V6=$(curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
                "https://api.vercel.com/v6/deployments/$DEPLOYMENT_ID?teamId=${{ secrets.VERCEL_ORG_ID }}")
              
              V6_ERROR=$(echo "$DELETE_RESPONSE_V6" | jq -r '.error.message // empty')
              
              if [ -z "$V6_ERROR" ]; then
                echo "Successfully deleted deployment $DEPLOYMENT_ID with v6 endpoint"
              else
                echo "Error with v6 endpoint: $V6_ERROR"
                echo "Could not delete deployment $DEPLOYMENT_ID"
                echo "Full response v13: $DELETE_RESPONSE_V13"
                echo "Full response v6: $DELETE_RESPONSE_V6"
              fi
            fi
          done
          
          echo "Deployment cleanup completed."
