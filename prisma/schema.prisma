generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String                 @unique
  emailVerified         DateTime?
  password              String?
  avatarUrl             String?
  role                  UserRole               @default(STUDENT)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt
  announcements         Announcement[]
  assignmentSubmissions AssignmentSubmission[]
  teacherCourses        Course[]               @relation("TeacherCourses")
  enrolledCourses       CourseEnrollment[]
  receivedMessages      Message[]              @relation("ReceivedMessages")
  sentMessages          Message[]              @relation("SentMessages")
}

model Course {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  category      String
  imageUrl      String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now()) @updatedAt
  teacherId     String             @db.ObjectId
  announcements Announcement[]
  assignments   Assignment[]
  teacher       User               @relation("TeacherCourses", fields: [teacherId], references: [id])
  enrollments   CourseEnrollment[]
  materials     CourseMaterial[]
}

model CourseEnrollment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  enrolledAt   DateTime @default(now())
  lastAccessed DateTime @default(now())
  progress     Float    @default(0)
  userId       String   @db.ObjectId
  courseId     String   @db.ObjectId
  course       Course   @relation(fields: [courseId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
}

model CourseMaterial {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  type       MaterialType
  url        String?
  content    String?
  uploadedAt DateTime     @default(now())
  courseId   String       @db.ObjectId
  course     Course       @relation(fields: [courseId], references: [id])
}

model Assignment {
  id          String                 @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  dueDate     DateTime
  totalPoints Int?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @default(now()) @updatedAt
  courseId    String                 @db.ObjectId
  course      Course                 @relation(fields: [courseId], references: [id])
  submissions AssignmentSubmission[]
}

model AssignmentSubmission {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  submittedAt  DateTime         @default(now())
  grade        String?
  status       SubmissionStatus @default(PENDING)
  content      String?
  feedback     String?
  assignmentId String           @db.ObjectId
  studentId    String           @db.ObjectId
  assignment   Assignment       @relation(fields: [assignmentId], references: [id])
  student      User             @relation(fields: [studentId], references: [id])

  @@unique([assignmentId, studentId])
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  sentAt     DateTime @default(now())
  isRead     Boolean  @default(false)
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Announcement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  authorId  String   @db.ObjectId
  courseId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
}

model StudentProgress {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  completedAssignments Int      @default(0)
  totalAssignments     Int      @default(0)
  overallGrade         String?
  lastUpdated          DateTime @default(now())
  userId               String   @unique @db.ObjectId
  courseId             String

  @@unique([userId, courseId])
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN

  @@map("user_role")
}

enum MaterialType {
  FILE
  VIDEO
  LINK
  TEXT

  @@map("material_type")
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
  LATE

  @@map("submission_status")
}
